{% extends 'layouts/base.njk' %}

{% from "editableAmounts.njk" import amountControls %}

{% block content %}

  {% include "header.njk" %}

  <main>

    {% if title %}
      <h1>
        {{ title }}
      </h1>
    {% endif %}

    <dl class="recipe-timings">
      {% if preptime %}
        <div>
          <dt>Prep:</dt>
          <dd>{{ preptime }}</dd>
        </div>
      {% endif %}
      {% if cooktime %}
        <div>
          <dt>Cook:</dt>
          <dd>{{ cooktime }}</dd>
        </div>
      {% endif %}
      {% if totaltime %}
        <div>
          <dt>Total:</dt>
          <dd><strong>{{ totaltime }}</strong></dd>
        </div>
      {% endif %}
    </dl>

    {% if is_markdown %}

      <article x-data="amounts()">

        {{ content | safe }}

        {{ amountControls() }}
      </article>

    {% else %}

        {{ content | safe }}

    {% endif %}

    {% if sources %}

      <hr/>

      <details id="sources">
        <summary>Sources</summary>
        <ul>
          {% for source in sources %}
          <li>{{ source | urlize | safe }}</li>
          {% endfor %}
        </ul>
      </details>

    {% endif %}

  </main>

  <script>
    function amounts() {
      return {
        modifier: 1,
        modified() { return this.modifier != 1 },
        snapping: false,
        isEditing: false,
        editingName: '',
        enableEditing(name) {
          this.isEditing = true;
          this.editingName = name;
        },
        disableEditing() {
          this.isEditing = false;
        },
        increment(amount) {
          return this.modifier = Number(this.modifier) + Number(amount);
        },
        toggleSnapping(){
          return this.snapping = !this.snapping;
        },
        format(amount, unit) {
          let newAmount = amount * this.modifier;
          return unit ? 
          `${newAmount <= 20 ? newAmount.toPrecision(this.snapping ? 1 : 2) / 1 : Math.round(newAmount)} ${unit}`
          :
          newAmount <= 20 ? newAmount.toPrecision(this.snapping ? 1 : 2) / 1 : Math.round(newAmount);
        },
        toHoursAndMinutes(totalMinutes) {
          const hours = Math.floor(totalMinutes / 60);
          const minutes = Math.floor(totalMinutes % 60);

          return `${hours > 0 ? ` ${hours}h` : ''}${minutes > 0 ? ` ${minutes}m` : ''}`;
        }
      }
    };
  </script>
{% endblock %}
