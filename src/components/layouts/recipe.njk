{% extends 'layouts/base.njk' %}

{% block content %}

  {% include "header.njk" %}

  <main>

    {% if title %}
      <h1 class="recipe-title" x-data="favourite()" x-init="fetchFavourites">
        {{ title }}
        <button
          x-cloak
          x-show="loaded"
          class="favourite-btn"
          :class="{ 'favourite-btn--favourited': favourited }"
          @click="toggleFavourite"
          title="Toggle favourite"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-star" width="32" height="32" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" :fill="favourited ? '#fcd632' : 'none'" stroke-linecap="round" stroke-linejoin="round" x-show="!favourited">
            <path d="M12 17.75l-6.172 3.245 1.179-6.873-4.993-4.867 6.9-1.002L12 2l3.086 6.253 6.9 1.002-4.993 4.867 1.179 6.873z" />
          </svg>
          <span x-show="favourited" x-transition:enter="scaleup">üòç</span>
        </button>
      </h1>
    {% endif %}

    {{ content | safe }}

    {% if sources %}

      <hr/>

      <details>
        <summary>Sources</summary>
        <ul>
          {% for source in sources %}
          <li>{{ source | urlize | safe }}</li>
          {% endfor %}
        </ul>
      </details>

    {% endif %}

  </main>

  <script>
    function amounts() {
      return {
        modifier: 1,
        modified() { return this.modifier != 1 },
        snapping: false,
        isEditing: false,
        editingName: '',
        enableEditing(name) {
          this.isEditing = true;
          this.editingName = name;
        },
        disableEditing() {
          this.isEditing = false;
        },
        increment(amount) {
          return this.modifier = Number(this.modifier) + Number(amount);
        },
        toggleSnapping(){
          return this.snapping = !this.snapping;
        },
        format(amount) {
          let newAmount = amount * this.modifier;
          return newAmount <= 20 ? newAmount.toPrecision(this.snapping ? 1 : 2) / 1 : Math.round(newAmount);
        }
      }
    };

    function favourite() {
      return {
        loaded: false,
        favourited: false,
        favourites: [],
        fetchFavourites: function(){
          const favourites = JSON.parse(localStorage.getItem('favourites'));
          console.log(favourites);
          if (favourites) {
            this.favourites = favourites;
            favourites.forEach (f => {
              if (f.url == '{{ page.url }}') {
                this.loaded = true;
                return this.favourited = true;
              }
            })
          }
          return this.loaded = true;
        },
        toggleFavourite: function() {
          if (this.favourited) {
            this.favourites = this.favourites.filter( f => f.url != '{{ page.url }}' );
          } else {
            this.favourites = [
            ...this.favourites,
              {
                url: '{{ page.url }}',
                title: '{{ title }}',
                icon: '{{ icon }}'
              }
            ]
          }
          localStorage.setItem('favourites', JSON.stringify(this.favourites));
          this.favourited = !this.favourited;
        },
      }
    }
  </script>
{% endblock %}
